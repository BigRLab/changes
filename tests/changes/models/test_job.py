from __future__ import absolute_import

import mock

from flask import current_app

from changes.models.command import CommandType
from changes.models.jobplan import JobPlan
from changes.testutils import TestCase
from changes.vcs.base import Vcs


class AutogeneratedJobTest(TestCase):
    def _create_job_and_jobplan(self):
        current_app.config['APT_SPEC'] = 'deb http://example.com/debian distribution component1'
        current_app.config['ENCAP_RSYNC_URL'] = 'rsync://example.com/encap/'
        current_app.config['BAZEL_APT_PKGS'] = ['bazel']
        current_app.config['BAZEL_ROOT_PATH'] = '/bazel/root/path'

        project = self.create_project()
        plan = self.create_plan(project)
        option = self.create_option(
            item_id=plan.id,
            name='bazel.autogenerate',
            value='1',
        )
        build = self.create_build(project)
        job = self.create_job(build)
        jobplan = self.create_job_plan(job, plan)
        return job

    @mock.patch('changes.models.project.Project.get_config')
    def test_autogenerated_commands(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': [],
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.dependencies': {
                'encap': [
                    'package1',
                    'pkg-2',
                ]
            },
            'bazel.exclude-tags': [],
            'bazel.cpus': 4,           # Default
            'bazel.mem': 8192,         # Default
            'bazel.max-executors': 1,  # Default
        }

        mock_vcs = mock.Mock(spec=Vcs)
        mock_vcs.get_buildstep_checkout_revision.return_value = 'git checkout master'
        mock_vcs.get_buildstep_checkout_parent_revision.return_value = 'git checkout master^'
        mock_vcs.get_buildstep_changed_files.return_value = 'git diff --name-only master^..master'
        job = self._create_job_and_jobplan()
        with mock.patch.object(job.project.repository, "get_vcs") as mock_get_vcs:
            mock_get_vcs.return_value = mock_vcs
            _, implementation = JobPlan.get_build_step_for_job(job.id)

        bazel_setup_expected = """#!/bin/bash -eux
sudo apt-get install -y --force-yes bazel
""".strip()

        sync_encap_expected = """
sudo mkdir -p /usr/local/encap/
sudo /usr/bin/rsync -a --delete rsync://example.com/encap/package1 /usr/local/encap/
sudo /usr/bin/rsync -a --delete rsync://example.com/encap/pkg-2 /usr/local/encap/
""".strip()

        collect_targets_expected = """#!/bin/bash -eu
sudo apt-get install -y --force-yes bazel python >/dev/null 2>&1

"/var/changes/input/collect-targets" --output-user-root="/bazel/root/path" --target-patterns=//aa/bb/cc/... --target-patterns=//aa/abc/...  --test-flags=--spawn_strategy=sandboxed --test-flags=--genrule_strategy=sandboxed --test-flags=--keep_going --jobs="8" --seletive-testing-skip-list={} 2> /dev/null
""".strip().format(job.project.get_config_path())

        extra_setup_expected = """#!/bin/bash -eux
exit 0
""".strip()

        assert len(implementation.commands) == 4

        assert implementation.max_executors == 1

        assert implementation.artifacts == []
        assert implementation.artifact_suffix == '.bazel'

        assert implementation.commands[0].type == CommandType.setup
        assert implementation.commands[0].script == bazel_setup_expected

        assert implementation.commands[1].type == CommandType.setup
        assert implementation.commands[1].script == sync_encap_expected

        assert implementation.commands[2].type == CommandType.setup
        assert implementation.commands[2].script == extra_setup_expected

        assert implementation.commands[3].type == CommandType.collect_bazel_targets
        assert implementation.commands[3].script == collect_targets_expected
        assert implementation.commands[3].env['VCS_CHECKOUT_TARGET_REVISION_CMD'] == 'git checkout master'
        assert implementation.commands[3].env['VCS_CHECKOUT_PARENT_REVISION_CMD'] == 'git checkout master^'
        assert implementation.commands[3].env['VCS_GET_CHANGED_FILES_CMD'] == 'git diff --name-only master^..master'

    @mock.patch('changes.models.project.Project.get_config')
    def test_autogenerated_commands_with_exclusions(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': [],
            'bazel.targets': [
                '//foo/bar/baz/...',
                '//bar/bax/...',
            ],
            'bazel.exclude-tags': [
                'flaky',
                'another_tag',
            ],
            'bazel.cpus': 2,
            'bazel.mem': 1234,
            'bazel.max-executors': 3,
        }

        mock_vcs = mock.Mock(spec=Vcs)
        mock_vcs.get_buildstep_checkout_revision.return_value = 'git checkout master'
        mock_vcs.get_buildstep_checkout_parent_revision.return_value = 'git checkout master^'
        mock_vcs.get_buildstep_changed_files.return_value = 'git diff --name-only master^..master'
        job = self._create_job_and_jobplan()
        with mock.patch.object(job.project.repository, "get_vcs") as mock_get_vcs:
            mock_get_vcs.return_value = mock_vcs
            _, implementation = JobPlan.get_build_step_for_job(job.id)

        collect_tests_expected = """#!/bin/bash -eu
sudo apt-get install -y --force-yes bazel python >/dev/null 2>&1

"/var/changes/input/collect-targets" --output-user-root="/bazel/root/path" --target-patterns=//foo/bar/baz/... --target-patterns=//bar/bax/... --exclude-tags=flaky --exclude-tags=another_tag --test-flags=--spawn_strategy=sandboxed --test-flags=--genrule_strategy=sandboxed --test-flags=--keep_going --jobs="4" --seletive-testing-skip-list={} 2> /dev/null
""".strip().format(job.project.get_config_path())

        assert implementation.max_executors == 3

        assert implementation.artifacts == []
        assert implementation.artifact_suffix == '.bazel'

        assert implementation.resources['cpus'] == 2
        assert implementation.resources['mem'] == 1234

        assert len(implementation.commands) == 4

        assert implementation.commands[0].type == CommandType.setup
        assert implementation.commands[1].type == CommandType.setup
        assert implementation.commands[2].type == CommandType.setup
        assert implementation.commands[3].type == CommandType.collect_bazel_targets
        assert implementation.commands[3].script == collect_tests_expected

    @mock.patch('changes.models.project.Project.get_config')
    def test_autogenerated_commands_with_additional_test_flags(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': ['--test_env=testing=123', '--test_env=testing=123'],
            'bazel.targets': [
                '//foo/bar/baz/...',
                '//bar/bax/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 2,
            'bazel.mem': 1234,
            'bazel.max-executors': 3,
        }

        mock_vcs = mock.Mock(spec=Vcs)
        mock_vcs.get_buildstep_checkout_revision.return_value = 'git checkout master'
        mock_vcs.get_buildstep_checkout_parent_revision.return_value = 'git checkout master^'
        mock_vcs.get_buildstep_changed_files.return_value = 'git diff --name-only master^..master'
        job = self._create_job_and_jobplan()
        with mock.patch.object(job.project.repository, "get_vcs") as mock_get_vcs:
            mock_get_vcs.return_value = mock_vcs
            _, implementation = JobPlan.get_build_step_for_job(job.id)

        collect_tests_expected = """#!/bin/bash -eu
sudo apt-get install -y --force-yes bazel python >/dev/null 2>&1

"/var/changes/input/collect-targets" --output-user-root="/bazel/root/path" --target-patterns=//foo/bar/baz/... --target-patterns=//bar/bax/...  --test-flags=--spawn_strategy=sandboxed --test-flags=--genrule_strategy=sandboxed --test-flags=--keep_going --test-flags=--test_env=testing=123 --jobs="4" --seletive-testing-skip-list={} 2> /dev/null
""".strip().format(job.project.get_config_path())

        assert implementation.max_executors == 3

        assert implementation.artifacts == []
        assert implementation.artifact_suffix == '.bazel'

        assert implementation.resources['cpus'] == 2
        assert implementation.resources['mem'] == 1234

        assert len(implementation.commands) == 4

        assert implementation.commands[0].type == CommandType.setup
        assert implementation.commands[1].type == CommandType.setup
        assert implementation.commands[2].type == CommandType.setup
        assert implementation.commands[3].type == CommandType.collect_bazel_targets
        assert implementation.commands[3].script == collect_tests_expected

    @mock.patch('changes.models.project.Project.get_config')
    def test_autogenerated_commands_with_additional_test_flags_invalid(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': ['--keep_going'],  # not in whitelist
            'bazel.targets': [
                '//foo/bar/baz/...',
                '//bar/bax/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 2,
            'bazel.mem': 1234,
            'bazel.max-executors': 3,
        }

        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)
        assert implementation is None

    @mock.patch('changes.models.project.Project.get_config')
    def test_invalid_cpus(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': [],
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 0,           # 0 CPUs is not valid
            'bazel.mem': 8192,
            'bazel.max-executors': 1,
        }

        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)
        assert implementation is None

        get_config.return_value = {
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 2,           # Too many
            'bazel.mem': 8192,
            'bazel.max-executors': 1,
        }

        current_app.config['MAX_CPUS_PER_EXECUTOR'] = 1
        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)
        assert implementation is None

    @mock.patch('changes.models.project.Project.get_config')
    def test_invalid_mems(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': [],
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 1,
            'bazel.mem': 1025,         # Too high
            'bazel.max-executors': 1,
        }

        current_app.config['MIN_MEM_MB_PER_EXECUTOR'] = 1
        current_app.config['MAX_MEM_MB_PER_EXECUTOR'] = 10
        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)

        assert implementation is None

        get_config.return_value = {
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 1,
            'bazel.mem': 1025,         # Too low
            'bazel.max-executors': 1,
        }

        current_app.config['MIN_MEM_MB_PER_EXECUTOR'] = 2000
        current_app.config['MAX_MEM_MB_PER_EXECUTOR'] = 3000
        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)

        assert implementation is None

    @mock.patch('changes.models.project.Project.get_config')
    def test_invalid_num_executors(self, get_config):
        get_config.return_value = {
            'bazel.additional-test-flags': [],
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 1,
            'bazel.mem': 1234,
            'bazel.max-executors': 0,  # invalid
        }

        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)

        assert implementation is None

        get_config.return_value = {
            'bazel.targets': [
                '//aa/bb/cc/...',
                '//aa/abc/...',
            ],
            'bazel.exclude-tags': [],
            'bazel.cpus': 1,
            'bazel.mem': 1234,
            'bazel.max-executors': 11,  # too high
        }

        _, implementation = JobPlan.get_build_step_for_job(self._create_job_and_jobplan().id)

        assert implementation is None
