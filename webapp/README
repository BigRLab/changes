This is a separate frontend (accessible via <your host>.com/v2/) that we're
building to replace the original one. Look in static/ and templates/ for the UI
currently being used.

Its written using React/JSX and ES6: Babel translates both into ES5.

== ORGANIZATION ==

css/: self-explanatory. Includes a hacky modification of bootstrap that I'd really like to clean up (I commented out conflicting CSS rather than setting the variables.) Or switch to Elemental
custom/: Custom text, images, and CSS that are company-specific. Dropbox keeps their customizations in a private repo.
display/: Useful, common UI components used by pages. Examples: Grid, Tabs, Error, APINotLoaded. The changes/ subdirectory has components/functions specific to Changes, e.g. SingleBuildStatus, authorLink()
dist/: the concatenated js served to users in production
html/: the html page sent down to the browser by the server
pages/: All the pages in Changes
scripts/: Right now, just has a hacky script that writes import statements for me automatically.
server/: fetches data from the server. Hopefully soon code to send data to the server
utils/: miscellaneous, useful stuff. The code to hook into custom text/images, a bunch of actual util functions like email_head() and first_line(), etc.

entry.js: the entry point into the app

== IMPORTANT NOTES ==

- Times from the server are always in UTC form, although they may not
  contain timezone info. By default, chrome and firefox will parse dates
  differently, so to be on the safe side you should always use moment.utc

- /display_examples (or maybe /v2/display_examples) has a nice gallery of all
  the reusable ui components we use

== OTHER ==

Q: Why not Angular or Ember? Why not server-side rendering?

Frameworks like Angular and Ember are very well suited for complex single-page apps, where you locally store a plethora of different data with relationships and dependencies, and have different interfaces for manipulating it.

Changes, on the other hand, is mostly a read-only tool. We could have implemented it with server-side rendering, but using react makes it _really easy_ to build UI interactivity into our pages. The data we use locally is not the traditional data stored in models, but UI state data.
