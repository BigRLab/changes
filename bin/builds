#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import sys

from datetime import datetime, timedelta

from changes.config import create_app, db
from changes.constants import Status
from changes.jobs.sync_build import sync_build
from changes.models import (
    Project, Build, Job
)

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage builds')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add build')
parser_add.add_argument('--project', metavar='slug', dest='project_slug', help='project slug')
parser_add.add_argument('--label', dest='label', help='build label')
parser_add.add_argument('--message', dest='message', help='build message')
parser_add.add_argument('--sha', metavar='sha', dest='revision_sha', help='parent revision sha')

parser_sync = subparsers.add_parser('sync', help='sync build details')
parser_sync.add_argument('id', help='build ID', nargs='?')
parser_sync.add_argument('-a', '--all', dest='all', action='store_true', help='all pending builds', required=False)

parser_stats = subparsers.add_parser('stats', help='get stats on jobs')
parser_stats.add_argument('-d', '--days', type=int,
                          help='period length (days)',
                          default=7)
parser_stats.add_argument('-o', '--output_format', choices=['text', 'csv'],
                          help='output format (default: text)',
                          default='text')
parser_stats.add_argument('-t', '--detail_type', dest='type',
                          choices=['projects', 'date', 'all'],
                          help='type of data for outputting details (default: all)',
                          default='all')

args = parser.parse_args()


def abort():
    print('Aborted!')
    sys.exit(1)


def get_build(id_):
    build = Build.query.get(id_)

    if not build:
        print("Build not found")
        sys.exit(1)

    return build


class CsvFormatter(object):
    def print_header(self, key, value):
        self.print(key, value)

    def print(self, key, value):
        print("{0},{1}".format(key, value))


class TextFormatter(object):
    def __init__(self, key_prefix, value_prefix):
        self.key_prefix = key_prefix
        self.value_prefix = value_prefix

    def print_header(self, key_name, value_name):
        print("Writing data for", key_name, "and", value_name)

    def print(self, key, value):
        print(self.key_prefix, key, self.value_prefix, value)


if args.command == 'add':
    project_slug = args.project_slug or raw_input('Project slug? ') or abort()
    project = Project.query.filter_by(slug=project_slug)[0]

    label = args.label or raw_input('Build label? ') or abort()
    message = args.message or raw_input('Build message? ') or abort()
    revision_sha = args.revision_sha or raw_input('Parent revision SHA? ') or abort()

    build = Build(
        project=project,
        repository=project.repository,
        label=label,
        message=message,
        revision_sha=revision_sha,
        status=Status.queued,
    )

    # TODO: this should use a backend defined by the project
    from changes.backends.jenkins.builder import JenkinsBuilder
    backend = JenkinsBuilder(app=app, base_url=app.config['JENKINS_URL'])
    backend.create_job(build)

    sync_build.delay(
        build_id=build.id.hex,
        task_id=build.id.hex,
    )

    db.session.add(build)
    db.session.commit()

    print("Created new build with ID {%s}" % (
        build.id,
    ))


elif args.command == 'sync':
    if args.id:
        builds = [get_build(args.id)]
    elif args.all:
        builds = Build.query.filter(Build.status != Status.finished)
    else:
        abort()

    for build in builds:
        print("Forcing build sync - {}".format(build.id.hex))

        sync_build.delay(
            build_id=build.id.hex,
            task_id=build.id.hex,
        )

elif args.command == 'stats':
    end_period = datetime.utcnow()
    days_delta = timedelta(days=args.days)
    start_period = end_period - days_delta

    jobs = Job.query.filter(
        Job.date_created >= start_period,
        Job.date_created < end_period,
    ).order_by(
        Job.date_created.desc(),
    )

    total_job_seconds = 0
    projects = {}
    cost_by_day = {}
    previous_day = end_period

    if args.output_format == 'csv':
        project_formatter = CsvFormatter()
        day_formatter = CsvFormatter()
    else:
        project_formatter = TextFormatter("Project", "cost")
        day_formatter = TextFormatter("On", "cost was")

    for job in jobs:
        if job.duration:
            job_seconds = job.duration/1000
            total_job_seconds += job_seconds

            # Add in cost by day stats
            if job.date_created < previous_day:
                previous_day -= timedelta(1)
                cost_by_day[previous_day] = job_seconds
            else:
                cost_by_day[previous_day] += job_seconds

            # Add in project stats
            project_id = job.project_id.hex
            if project_id in projects:
                previous_cost = projects[project_id]
                projects[project_id] = previous_cost + job_seconds
            else:
                projects[project_id] = job.duration/1000
        else:
            print("WARNING: No duration found for:", job, file=sys.stderr)

    if args.output_format == 'text':
        print("Total cost (seconds) spent running jobs:", total_job_seconds)

    if args.type == 'all' or args.type == 'project':
        print()
        project_formatter.print_header("Project_ID", "Seconds")
        for project_id, cost in projects.items():
            project_formatter.print(project_id, cost)

    if args.type == 'all' or args.type == 'date':
        print()
        day_formatter.print_header("Date", "Seconds")
        for day, cost in cost_by_day.items():
            day_formatter.print(day, cost)
