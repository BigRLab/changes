#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import logging
import toronado

from flask import render_template
from flask_mail import Message

from changes.config import create_app, mail
from changes.models import Project
from changes.reports.build import BuildReport


def get_project(id_):
    if len(id_) == 40:
        # assume its a uuid
        project = Project.query.get(id_)
    else:
        project = Project.query.filter_by(slug=id_).first()

    if not project:
        err_msg = "Project '{0}' not found".format(id_)
        print(err_msg)
        raise Exception(err_msg)

    return project


app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage reports')

subparsers = parser.add_subparsers(dest='command')

parser_send = subparsers.add_parser('send', help='send report')
parser_send.add_argument(
    '-d', '--days', dest='days', type=int, help='period length (days)',
    default=7)
parser_send.add_argument(
    '-p', '--project', dest='projects', metavar='PROJECT',
    help='project ID or slug (default: all projects)', action='append')
parser_send.add_argument(
    '-n', '--dry_run', dest='dry_run', action="store_true",
    help='run without actually sending mail')
parser_send.add_argument(
    dest='emails', help='email', nargs='+')

args = parser.parse_args()

try:
    if args.command == 'send':
        if not args.projects:
            print('Fetching project details for all projects')
            projects = Project.query.all()
        else:
            print('Fetching project details for: %s' % args.projects)
            projects = [get_project(p) for p in args.projects]

        report = BuildReport(projects)

        context = report.generate(days=args.days)

        text_content = 'HTML only, #dealwithit'
        html_content = toronado.from_string(
            render_template('email/build_report.html', **context)
        )

        msg = Message(context['title'], recipients=args.emails)
        msg.body = text_content
        msg.html = html_content

        if args.dry_run:
            print('If this were not a dry run, we would have sent:', msg)
        else:
            mail.send(msg)

except Exception as err:
    logging.exception(unicode(err))
    print(err)
