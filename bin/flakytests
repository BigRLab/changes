#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import logging

from datetime import date, datetime, timedelta

from changes.config import create_app, db
from changes.db.utils import try_create
from changes.lib.flaky_tests import get_flaky_tests
from changes.models import FlakyTestStat, Project


MAX_FLAKY_TESTS = 200


def valid_date(s):
    try:
        return datetime.strptime(s, '%Y-%m-%d')
    except ValueError:
        raise argparse.ArgumentTypeError("Not a valid date: '{0}'".format(s))


app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Compute and store flaky tests')

parser.add_argument(
    '-d',
    '--date',
    dest='date',
    type=valid_date,
    help='date (default: yesterday)',
    default=date.today()-timedelta(days=1)
)
parser.add_argument(
    '-m',
    '--max',
    dest='max',
    type=int,
    help='max number of flaky tests per project',
    default=MAX_FLAKY_TESTS
)

args = parser.parse_args()

try:
    projects = Project.query.all()

    for project in projects:
        tests = get_flaky_tests(args.date, args.date+timedelta(days=1), [project], args.max)

        for test in tests:
            try_create(FlakyTestStat, {
                'name': test['name'],
                'project_id': test['project_id'],
                'date': args.date,
                'last_flaky_run_id': test['id'],
                'flaky_runs': test['flaky_runs'],
                'passing_runs': test['passing_runs']
            })

    db.session.commit()
except Exception as err:
    logging.exception(unicode(err))
    print(err)
