#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import logging

from datetime import date, datetime, timedelta

from changes.config import create_app, db
from changes.db.utils import try_create
from changes.lib.flaky_tests import get_flaky_tests
from changes.models import FlakyTestStat, Project


MAX_FLAKY_TESTS = 500


def valid_date(s):
    try:
        return datetime.strptime(s, '%Y-%m-%d')
    except ValueError:
        raise argparse.ArgumentTypeError("Not a valid date: '{0}'".format(s))


app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Compute and store flaky tests')

parser.add_argument(
    '-e',
    '--end-date',
    dest='end_date',
    type=valid_date,
    help='end date (default: today)',
    default=date.today()
)

args = parser.parse_args()

try:
    projects = Project.query.all()

    end_period = args.end_date
    start_period = end_period - timedelta(days=7)

    tests = get_flaky_tests(start_period, end_period, projects, MAX_FLAKY_TESTS)

    for test in tests:
        try_create(FlakyTestStat, {
            'name': test['name'],
            'project_id': test['project_id'],
            'end_date': end_period,
            'last_flaky_run_id': test['id'],
            'flaky_runs': test['flaky_runs'],
            'passing_runs': test['passing_runs']
        })

    db.session.commit()
except Exception as err:
    logging.exception(unicode(err))
    print(err)
